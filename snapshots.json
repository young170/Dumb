[
  {
    "timestamp": "2025-02-06T04:51:15.514Z",
    "text": "// src/extension.ts\nimport * as vscode from \"vscode\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\ninterface Snippet {\n  language: string;\n  code: string;\n}\n\nconst SNIPPETS_FILE = path.join(__dirname, \"../src\", \"snippets.json\");\n\nexport function activate(context: vscode.ExtensionContext) {\n  let disposable = vscode.commands.registerCommand(\n    \"snippetReels.start\",\n    async () => {\n      const editor = vscode.window.activeTextEditor;\n      if (!editor) {\n        vscode.window.showInformationMessage(\n          \"Open a file to get snippet recommendations.\"\n        );\n        return;\n      }\n\n      // extract data from editor\n      const language = editor.document.languageId;\n      const fileName = editor.document.fileName;\n      // syntax-related data: source code, function name(s), variable name(s),\n\n      // get snippets based on the data\n      const snippets = await getSnippets(language);\n\n      // display\n      SnippetReelPanel.createOrShow(context.extensionUri, snippets);\n    }\n  );\n  context.subscriptions.push(disposable);\n}\n\nexport function deactivate() {}\n\nfunction getSnippets(language: string): string[] {\n  try {\n    // Read and parse the JSON file\n    const data = fs.readFileSync(SNIPPETS_FILE, \"utf-8\");\n    const snippets: Snippet[] = JSON.parse(data);\n\n    // Filter snippets matching the specified language\n    return snippets\n      .filter(\n        (snippet) => snippet.language.toLowerCase() === language.toLowerCase()\n      )\n      .map((snippet) => snippet.code);\n  } catch (error) {\n    console.error(\"Error reading snippets file:\", error);\n    return [];\n  }\n}\n\n// Display\nclass SnippetReelPanel {\n  public static currentPanel: SnippetReelPanel | undefined;\n  private readonly panel: vscode.WebviewPanel;\n  private disposables: vscode.Disposable[] = [];\n\n  private constructor(\n    panel: vscode.WebviewPanel,\n    snippets: string[],\n    extensionUri: vscode.Uri\n  ) {\n    this.panel = panel;\n    this.updateWebview(snippets);\n    this.panel.onDidDispose(() => this.dispose(), null, this.disposables);\n  }\n\n  public static createOrShow(extensionUri: vscode.Uri, snippets: string[]) {\n    if (SnippetReelPanel.currentPanel) {\n      SnippetReelPanel.currentPanel.updateWebview(snippets);\n      SnippetReelPanel.currentPanel.panel.reveal(vscode.ViewColumn.One);\n    } else {\n      const panel = vscode.window.createWebviewPanel(\n        \"snippetReels\",\n        \"Snippet Reels\",\n        vscode.ViewColumn.One,\n        { enableScripts: true }\n      );\n      SnippetReelPanel.currentPanel = new SnippetReelPanel(\n        panel,\n        snippets,\n        extensionUri\n      );\n    }\n  }\n\n  private updateWebview(snippets: string[]) {\n    this.panel.webview.html = this.getWebviewContent(snippets);\n  }\n\n  private getWebviewContent(snippets: string[]): string {\n    return `\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <style>\n                    body { font-family: sans-serif; text-align: center; }\n                    pre { background:rgb(83, 76, 76); padding: 10px; white-space: pre-wrap; }\n                    .container { height: 100vh; display: flex; flex-direction: column; justify-content: center; }\n                </style>\n            </head>\n            <body>\n                <div class=\"container\">\n                    <pre id=\"snippet\"></pre>\n                </div>\n                <script>\n                    const snippets = ${JSON.stringify(snippets)};\n                    let index = 0;\n                    function updateSnippet() {\n                        document.getElementById('snippet').textContent = snippets[index] || 'No snippets available';\n                    }\n                    function cycleSnippets() {\n                        setInterval(() => {\n                            index = (index + 1) % snippets.length;\n                            updateSnippet();\n                        }, 1000);\n                    }\n                    updateSnippet();\n                    cycleSnippets();\n                </script>\n            </body>\n            </html>`;\n  }\n\n  public dispose() {\n    SnippetReelPanel.currentPanel = undefined;\n    this.panel.dispose();\n    while (this.disposables.length) {\n      const disposable = this.disposables.pop();\n      if (disposable) {\n        disposable.dispose();\n      }\n    }\n  }\n}\n",
    "language": "typescript"
  },
  {
    "timestamp": "2025-02-06T04:52:42.793Z",
    "text": "// src/extension.ts\nimport * as vscode from \"vscode\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\ninterface Snippet {\n  language: string;\n  code: string;\n}\n\nconst SNIPPETS_FILE = path.join(__dirname, \"../src\", \"snippets.json\");\n\nexport function activate(context: vscode.ExtensionContext) {\n  let disposable = vscode.commands.registerCommand(\n    \"snippetReels.start\",\n    async () => {\n      const editor = vscode.window.activeTextEditor;\n      if (!editor) {\n        vscode.window.showInformationMessage(\n          \"Open a file to get snippet recommendations.\"\n        );\n        return;\n      }\n\n      // extract data from editor\n      const language = editor.document.languageId;\n      const fileName = editor.document.fileName;\n      // syntax-related data: source code, imported libraries, function name(s), and variable name(s)\n\n      // get snippets based on the data\n      const snippets = await getSnippets(language);\n\n      // display\n      SnippetReelPanel.createOrShow(context.extensionUri, snippets);\n    }\n  );\n  context.subscriptions.push(disposable);\n}\n\nexport function deactivate() {}\n\nfunction getSnippets(language: string): string[] {\n  try {\n    // Read and parse the JSON file\n    const data = fs.readFileSync(SNIPPETS_FILE, \"utf-8\");\n    const snippets: Snippet[] = JSON.parse(data);\n\n    // Filter snippets matching the specified language\n    return snippets\n      .filter(\n        (snippet) => snippet.language.toLowerCase() === language.toLowerCase()\n      )\n      .map((snippet) => snippet.code);\n  } catch (error) {\n    console.error(\"Error reading snippets file:\", error);\n    return [];\n  }\n}\n\n// Display\nclass SnippetReelPanel {\n  public static currentPanel: SnippetReelPanel | undefined;\n  private readonly panel: vscode.WebviewPanel;\n  private disposables: vscode.Disposable[] = [];\n\n  private constructor(\n    panel: vscode.WebviewPanel,\n    snippets: string[],\n    extensionUri: vscode.Uri\n  ) {\n    this.panel = panel;\n    this.updateWebview(snippets);\n    this.panel.onDidDispose(() => this.dispose(), null, this.disposables);\n  }\n\n  public static createOrShow(extensionUri: vscode.Uri, snippets: string[]) {\n    if (SnippetReelPanel.currentPanel) {\n      SnippetReelPanel.currentPanel.updateWebview(snippets);\n      SnippetReelPanel.currentPanel.panel.reveal(vscode.ViewColumn.One);\n    } else {\n      const panel = vscode.window.createWebviewPanel(\n        \"snippetReels\",\n        \"Snippet Reels\",\n        vscode.ViewColumn.One,\n        { enableScripts: true }\n      );\n      SnippetReelPanel.currentPanel = new SnippetReelPanel(\n        panel,\n        snippets,\n        extensionUri\n      );\n    }\n  }\n\n  private updateWebview(snippets: string[]) {\n    this.panel.webview.html = this.getWebviewContent(snippets);\n  }\n\n  private getWebviewContent(snippets: string[]): string {\n    return `\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <style>\n                    body { font-family: sans-serif; text-align: center; }\n                    pre { background:rgb(83, 76, 76); padding: 10px; white-space: pre-wrap; }\n                    .container { height: 100vh; display: flex; flex-direction: column; justify-content: center; }\n                </style>\n            </head>\n            <body>\n                <div class=\"container\">\n                    <pre id=\"snippet\"></pre>\n                </div>\n                <script>\n                    const snippets = ${JSON.stringify(snippets)};\n                    let index = 0;\n                    function updateSnippet() {\n                        document.getElementById('snippet').textContent = snippets[index] || 'No snippets available';\n                    }\n                    function cycleSnippets() {\n                        setInterval(() => {\n                            index = (index + 1) % snippets.length;\n                            updateSnippet();\n                        }, 1000);\n                    }\n                    updateSnippet();\n                    cycleSnippets();\n                </script>\n            </body>\n            </html>`;\n  }\n\n  public dispose() {\n    SnippetReelPanel.currentPanel = undefined;\n    this.panel.dispose();\n    while (this.disposables.length) {\n      const disposable = this.disposables.pop();\n      if (disposable) {\n        disposable.dispose();\n      }\n    }\n  }\n}\n",
    "language": "typescript"
  },
  {
    "timestamp": "2025-02-06T05:42:23.861Z",
    "text": "// src/extension.ts\nimport * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport { extractData } from \"./extractData\";\nimport { getSnippets } from \"./getSnippets\";\n\nconst SNIPPETS_FILE = path.join(__dirname, \"../src\", \"snippets.json\");\n\n/**\n * extract data from editor file\n * hash the data\n * rank-N code snippets from database\n * display\n * @param context\n */\nexport function activate(context: vscode.ExtensionContext) {\n  let disposable = vscode.commands.registerCommand(\n    \"snippetReels.start\",\n    async () => {\n      const editor = vscode.window.activeTextEditor;\n      if (!editor) {\n        vscode.window.showInformationMessage(\n          \"Open a file to get snippet recommendations.\"\n        );\n        return;\n      }\n\n      const extractedData: Map<string, string[]> = extractData(editor.document);\n      // get snippets based on the data\n      const snippets: string[] = getSnippets(SNIPPETS_FILE, extractedData);\n      // display\n      SnippetReelPanel.displayReels(context.extensionUri, snippets);\n    }\n  );\n  context.subscriptions.push(disposable);\n}\n\nexport function deactivate() {}\n\n// Display\nclass SnippetReelPanel {\n  public static currentPanel: SnippetReelPanel | undefined;\n  private readonly panel: vscode.WebviewPanel;\n  private disposables: vscode.Disposable[] = [];\n\n  private constructor(\n    panel: vscode.WebviewPanel,\n    snippets: string[],\n    extensionUri: vscode.Uri\n  ) {\n    this.panel = panel;\n    this.updateWebview(snippets);\n    this.panel.onDidDispose(() => this.dispose(), null, this.disposables);\n  }\n\n  public static displayReels(extensionUri: vscode.Uri, snippets: string[]) {\n    if (SnippetReelPanel.currentPanel) {\n      SnippetReelPanel.currentPanel.updateWebview(snippets);\n      SnippetReelPanel.currentPanel.panel.reveal(vscode.ViewColumn.One);\n    } else {\n      const panel = vscode.window.createWebviewPanel(\n        \"snippetReels\",\n        \"Snippet Reels\",\n        vscode.ViewColumn.One,\n        { enableScripts: true }\n      );\n      SnippetReelPanel.currentPanel = new SnippetReelPanel(\n        panel,\n        snippets,\n        extensionUri\n      );\n    }\n  }\n\n  private updateWebview(snippets: string[]) {\n    this.panel.webview.html = this.getWebviewContent(snippets);\n  }\n\n  private getWebviewContent(snippets: string[]): string {\n    return `\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <style>\n                    body { font-family: sans-serif; text-align: center; }\n                    pre { background:rgb(83, 76, 76); padding: 10px; white-space: pre-wrap; }\n                    .container { height: 100vh; display: flex; flex-direction: column; justify-content: center; }\n                </style>\n            </head>\n            <body>\n                <div class=\"container\">\n                    <pre id=\"snippet\"></pre>\n                </div>\n                <script>\n                    const snippets = ${JSON.stringify(snippets)};\n                    let index = 0;\n                    function updateSnippet() {\n                        document.getElementById('snippet').textContent = snippets[index] || 'No snippets available';\n                    }\n                    function cycleSnippets() {\n                        setInterval(() => {\n                            index = (index + 1) % snippets.length;\n                            updateSnippet();\n                        }, 2000);\n                    }\n                    updateSnippet();\n                    cycleSnippets();\n                </script>\n            </body>\n            </html>`;\n  }\n\n  public dispose() {\n    SnippetReelPanel.currentPanel = undefined;\n    this.panel.dispose();\n    while (this.disposables.length) {\n      const disposable = this.disposables.pop();\n      if (disposable) {\n        disposable.dispose();\n      }\n    }\n  }\n}\n",
    "language": "typescript"
  }
]